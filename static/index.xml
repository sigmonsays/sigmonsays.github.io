<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Statics on sig </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://sigmonsays.github.io/static/index.xml/</link>
    
    
    
    <updated>Fri, 12 Sep 2014 09:38:41 PDT</updated>
    
    <item>
      <title>firewall</title>
      <link>http://sigmonsays.github.io/static/firewall/</link>
      <pubDate>Fri, 12 Sep 2014 09:38:41 PDT</pubDate>
      
      <guid>http://sigmonsays.github.io/static/firewall/</guid>
      <description>&lt;p&gt;Just a nasty little adhoc firewall script I use to quickly secure a box for any ports it has open.&lt;/p&gt;

&lt;p&gt;Only specific networks are allowed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
#set -x

iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

iptables -F INPUT 
#iptables -F FORWARD 
#iptables -F OUTPUT 

function clean_networks {
   grep -v ^# | awk &#39;{print $1}&#39; |grep -v ^$
}

# Quick and dirty iptables firewall
# We want to drop traffic for any open port if its not in the allowed list of IP addresses
# 
function list_allowed_networks {

# the 1918 subnets
cat &amp;lt;&amp;lt; EOF | clean_networks
10.0.0.0/8
172.16.0.0/12
192.168.0.0/16
EOF

cat &amp;lt;&amp;lt; EOF | clean_networks
10.0.0.0/8
127.0.0.0/8
EOF
}

function list_open_ports {
	# ipv4
	netstat -lntu |awk &#39;/^tcp / {print $4}&#39; |awk -F: &#39;{print $2}&#39;
	# ipv6
	netstat -lntu |awk &#39;/^tcp6 / {print $4}&#39; |awk -F: &#39;{print $4}&#39;
}
function list_ports {
	list_open_ports
	echo 22
}
function list_networks {
	for N in $(list_allowed_networks)
	do
		echo $N
	done
	if [ -f /etc/firewall/networks.list ] ; then
		cat /etc/firewall/networks.list
	fi

	# All local addresses
	ip addr | awk -F&#39;[ /]+&#39; &#39;/inet / {print $3}&#39;

	# Let all your connected subnets in..
	# ip addr | awk  &#39;/inet / {print $2}&#39;
}

function prepare_iptables {

	# Create drop logged chain
	if ! iptables -L drop_logged &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 ; then
		iptables -N drop_logged
	fi
	iptables -F drop_logged
	iptables -A drop_logged -j LOG --log-prefix &amp;quot;iptables-dropped: &amp;quot; --log-level 4
	iptables -A drop_logged -j DROP
}



#
# Begin building the firewall
#
prepare_iptables

list_networks | while read N
do
	echo &amp;quot;netowrk $N&amp;quot;
        iptables -A INPUT -s $N -j ACCEPT
done

list_ports | while read P
do
	echo &amp;quot;securing port $P&amp;quot;
        iptables -A INPUT -p tcp --dport $P -j drop_logged
done



&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>