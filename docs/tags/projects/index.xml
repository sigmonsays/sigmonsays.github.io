<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>projects on sigmonsays</title>
    <link>http://sigmonsays.github.io/tags/projects/</link>
    <description>Recent content in projects on sigmonsays</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Dec 2023 10:58:55 -0800</lastBuildDate><atom:link href="http://sigmonsays.github.io/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>picman: photo sorting tool</title>
      <link>http://sigmonsays.github.io/post/picman/</link>
      <pubDate>Sun, 31 Dec 2023 10:58:55 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/post/picman/</guid>
      <description>github https://github.com/sigmonsays/picman
I wrote a basic tool to replace my krufty bash scripts that imports my photos from various locations into their final resting place.
The tool operates in steps where each step is kind of idempotent. The set of all steps is called a workflow and operates on a single file. see code.
Each step operates on the same workflow object, which primarily has a state object
State Object code</description>
    </item>
    
    <item>
      <title>dotbot</title>
      <link>http://sigmonsays.github.io/post/dotbot/</link>
      <pubDate>Sun, 29 Jan 2023 08:57:49 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/post/dotbot/</guid>
      <description>Table of Contents
why dotbot why dotbot is a tool to manage dot files. I wrote this tool after gettting tired of futzing around with the python dotbot from https://github.com/anishathalye/dotbot. Full disclosure I love this tool and it&amp;rsquo;s the motivation for the development of my own dotbot.
I had two main issues that were annoying to me. First, git submodules were a part of the bootstrap process. Second, I always needed some yaml dependancy installed.</description>
    </item>
    
    <item>
      <title>screenshot</title>
      <link>http://sigmonsays.github.io/post/screenshot/</link>
      <pubDate>Wed, 06 Dec 2017 13:01:02 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/post/screenshot/</guid>
      <description>Screenshot is a simple python script that has evolved over time. It started out as a shell script which called import -window root screenshot.png and has evolved into a full featured application.
Github page - https://github.com/sigmonsays/screenshot/blob/master/README.md
The point of this post is to demonstrate how to setup screenshot and how to use it to achieve a few things
Installation
git clone https://github.com/sigmonsays/screenshot.git sudo apt-get install -y xclip imagemagick cd screenshot sudo pip install .</description>
    </item>
    
    <item>
      <title>paste, an hour long project</title>
      <link>http://sigmonsays.github.io/post/paste/</link>
      <pubDate>Sun, 31 Jan 2016 10:58:55 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/post/paste/</guid>
      <description>I&amp;rsquo;m sure anyone who has been on IRC or any type of chat understands the concept of a no paste service.
It has always been bothersome to me that any paste, or &amp;ldquo;no paste&amp;rdquo; command line client has to be needlessly complex. Some i&amp;rsquo;ve tried to use in the past have required installing ruby gems which I despise. So to scratch an itch, I wrote my very own which requires nothing more than curl.</description>
    </item>
    
    <item>
      <title>git-watch</title>
      <link>http://sigmonsays.github.io/post/git-watch/</link>
      <pubDate>Sun, 03 Jan 2016 21:33:07 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/post/git-watch/</guid>
      <description>git watch is a simple library and CLI tool for monitoring git repositories and triggering events (restart process) when they change.
git watch [1] was designed as a way to easily build and deploy daemons in development when upstream changes. The changes can be either code (in git) or configuration.
So here is a simple example which will automatically rebuild and restart a application when you git push (https://github.com/sigmonsays/git-watch/tree/master/examples/go)
Below in git-watch.</description>
    </item>
    
  </channel>
</rss>
