<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sig</title>
    <link>http://sigmonsays.github.io/post/</link>
    <description>Recent content in Posts on sig</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 17 Oct 2016 14:27:30 -0700</lastBuildDate>
    <atom:link href="http://sigmonsays.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>bunny</title>
      <link>http://sigmonsays.github.io/2016/10/bunny/</link>
      <pubDate>Mon, 17 Oct 2016 14:27:30 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/10/bunny/</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6dDBAiq4RFE?rel=0&amp;amp;showinfo=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>random musings</title>
      <link>http://sigmonsays.github.io/2016/10/random-musings/</link>
      <pubDate>Sun, 16 Oct 2016 19:51:52 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/10/random-musings/</guid>
      <description>

&lt;h1 id=&#34;would-you-rather-fight-100-duck-sized-horses-or-one-horse-sized-duck:2a3e229a0c52252aca13c01ed60c9a60&#34;&gt;Would you rather fight 100 duck sized horses or one horse sized duck?&lt;/h1&gt;

&lt;p&gt;Bill Murray weights in &lt;a href=&#34;https://www.youtube.com/watch?v=THUGHEJjjGc&#34;&gt;https://www.youtube.com/watch?v=THUGHEJjjGc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>interesting tech</title>
      <link>http://sigmonsays.github.io/2016/10/interesting-tech/</link>
      <pubDate>Sun, 16 Oct 2016 14:50:29 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/10/interesting-tech/</guid>
      <description>

&lt;h1 id=&#34;hitless-haproxy-reload:e5ea4b745fd245f72610ce6bf6ba6942&#34;&gt;hitless haproxy reload&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sorah/sandbox/tree/master/ruby/haproxy-master&#34;&gt;https://github.com/sorah/sandbox/tree/master/ruby/haproxy-master&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;go-jira:e5ea4b745fd245f72610ce6bf6ba6942&#34;&gt;go jira&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Netflix-Skunkworks/go-jira&#34;&gt;https://github.com/Netflix-Skunkworks/go-jira&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I currently use this program in a very limited fashion for managing development workflow. it becomes very handy to build a
shell script environment for aiding in common development process. Right now its only used to view jira tasks and comment on
them.&lt;/p&gt;

&lt;p&gt;This is powerful enough for the time being&lt;/p&gt;

&lt;h1 id=&#34;http2-keylog:e5ea4b745fd245f72610ce6bf6ba6942&#34;&gt;http2 keylog&lt;/h1&gt;

&lt;p&gt;with the growing popularity of http/2 you can&amp;rsquo;t be without the ability to inspect the payload.&lt;/p&gt;

&lt;p&gt;This looks really useful in tracing http/2 (even grpc) with wireshark&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/joneskoo/http2-keylog/&#34;&gt;https://github.com/joneskoo/http2-keylog/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;xo:e5ea4b745fd245f72610ce6bf6ba6942&#34;&gt;xo&lt;/h1&gt;

&lt;p&gt;generate idomatic go code for SQL databases (Please do not confuse this with an ORM!)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/knq/xo&#34;&gt;https://github.com/knq/xo&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;teleport:e5ea4b745fd245f72610ce6bf6ba6942&#34;&gt;teleport&lt;/h1&gt;

&lt;p&gt;its a pretty impressive ssh daemon setup that has temporary certs for ssh access through a central auth system, with 2-factor
auth built in. Every &amp;ldquo;teleport node&amp;rdquo; registers itself too so you can just list specific nodes&lt;/p&gt;

&lt;p&gt;I can imagine something like this becoming &amp;ldquo;the normal&amp;rdquo; in a cloud computing environment&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gravitational/teleport&#34;&gt;https://github.com/gravitational/teleport&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;sftp-server-library-in-go:e5ea4b745fd245f72610ce6bf6ba6942&#34;&gt;sftp server library in go&lt;/h1&gt;

&lt;p&gt;SFTP server library in Go, &lt;a href=&#34;https://github.com/taruti/sftpd&#34;&gt;https://github.com/taruti/sftpd&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;toasteroid:e5ea4b745fd245f72610ce6bf6ba6942&#34;&gt;toasteroid&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;print stuff on your toast.&lt;/li&gt;
&lt;li&gt;Print Ads on your toast.&lt;/li&gt;
&lt;li&gt;Profit. What!?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See &lt;a href=&#34;https://toasteroid.com/&#34;&gt;https://toasteroid.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I imagine a (dystopian?) future where you have to pay a subscription fee to remove ads from your toast in the morning&lt;/p&gt;

&lt;p&gt;This could be the IoT future we all hate.&lt;/p&gt;

&lt;h1 id=&#34;httpcache:e5ea4b745fd245f72610ce6bf6ba6942&#34;&gt;httpcache&lt;/h1&gt;

&lt;p&gt;A Transport for http.Client that will cache responses according to the HTTP RFC&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gregjones/httpcache&#34;&gt;https://github.com/gregjones/httpcache&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hitler uses docker</title>
      <link>http://sigmonsays.github.io/2016/04/hitler-uses-docker/</link>
      <pubDate>Mon, 11 Apr 2016 11:23:01 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/04/hitler-uses-docker/</guid>
      <description>&lt;p&gt;video&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PivpCKEiQOQ&#34;&gt;https://www.youtube.com/watch?v=PivpCKEiQOQ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;transcript
-------------------------------

we pushed the images to dockerhub, then used docker-compose to deploy to the cluster

we mounted data volumes on these nodes

and linked app container here

finally we&#39;ve updated the DNS records


hitler: so we&#39;re running 20 containers on every node now. when can we get rid of the excess servers?

mein fuhrer...

the kernel... 
A 3rd party container caused a panic...

we&#39;ve lost 70% of the cluster and the data volumes

.... hitler loses his shit ....

hitler: if you never used docker in production, leave the room now

hitler: isolation my ass!

hitler: what were you thinking?

hitler: who the hell uses public containers from docker hub?

hitler: for all you know they were made by russian hackers!

hitler: you might as well use `curl | sudo bash`

hitler: you think everything in public rpeo is secure because it&#39;s OSS?

hitler: you&#39;re a bunch of node.js hipsters that just HAVE to install everything you read on hacker news!

but docker allows us to run our applications anywhere!

hitler: you use a VM just to run docker on your laptop!

mein fuhrer, docker-machine uses a lightweight VM!

hitler: do you hear yourself? why do we need docker if we&#39;re running a VM?

hitler: a container inside a container!!!

hitler: you archived a whole linux O/S then used CoW storage becaues it&#39;s too big

hitler: Just so you can deploy a 10MB go Binary!

hitler: Dont even talk to me about resource constraints

hitler: all that cgroups black magic and it still can&#39;t stop a simple fork bomb!

hitler: and if the database needs all the resources on the server, how exactly will docker allow you to run more programs on it?

hitler: before docker, I just picked the right size VMs. 

hitler: Suddenly people talk to me about datacenter efficiency and &amp;quot;hyperconvergence&amp;quot;

hitler: everybody thinkst they&#39;re google!

hitler: you don&#39;t even run your own machines anymore!

hitler: people run docker on GCE, in VM instances that run in linux containers on Borg!

hitler: people even think docker is configuration management

hitler: they think docker solves everything!

hitler: even microsoft has containers now

hitler: i&#39;m moving everyone to windows!

dont cry, you can run bash on windows 10 now

hitler: docker is supposed to have better performance

hitler: yet that fucker userland proxy is slower than a 28.8k modem

hitler: and for what

hitler: just bind on port 0

hitler: even enterprises want to run docker now and they still have red hat 5 installed

hitler: you idiots think docker will help your application scale

hitler: use openstack for all I care
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>programming exercise</title>
      <link>http://sigmonsays.github.io/2016/03/programming-exercise/</link>
      <pubDate>Wed, 02 Mar 2016 14:57:19 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/03/programming-exercise/</guid>
      <description>&lt;p&gt;I heard from a friend about an interesting interview question that I thought would be easy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The problem&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;the goal of this program is to find the shortest number of stickers used to make a another word given that you have thousands of stickers&lt;/p&gt;

&lt;p&gt;for instance, with the word &amp;ldquo;WPENGINE&amp;rdquo; printed on them to make for example &amp;ldquo;WWW&amp;rdquo; would take 3 and another example is &amp;ldquo;WINE&amp;rdquo; would take 1.&lt;/p&gt;

&lt;p&gt;The programs logic is really quite literal and was enjoyable to write.&lt;/p&gt;

&lt;p&gt;We have a Sticker type who keeps track of the number of letters used and a pile of stickers which is just a list
of stickers. We search the pile for a given letter, and if its not found we add another sticker to the pile.&lt;/p&gt;

&lt;p&gt;We keep a dummy sticker object around to validate that we do infact have the letters, and error if not.&lt;/p&gt;

&lt;p&gt;The code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  package main

  import (
     &amp;quot;fmt&amp;quot;
     &amp;quot;os&amp;quot;
     &amp;quot;strings&amp;quot;
  )

  func NewSticker(word string) *Sticker {
     s := &amp;amp;Sticker{
        letters: make(map[rune]int, 0),
     }
     var v int
     for _, w := range strings.ToLower(word) {
        v, _ = s.letters[w]
        v += 1
        s.letters[w] = v
     }
     return s
  }

  type Sticker struct {
     letters map[rune]int
  }

  func (s *Sticker) HasLetter(l rune) bool {
     count, found := s.letters[l]
     if found == false {
        return false
     }
     if count &amp;gt; 0 {
        return true
     }
     return false
  }

  func (s *Sticker) Desc() string {
     a := make([]string, 0)
     for l, cnt := range s.letters {
        a = append(a, fmt.Sprintf(&amp;quot;%s=%d&amp;quot;, string(l), cnt))
     }
     return strings.Join(a, &amp;quot; &amp;quot;)
  }

  func (s *Sticker) UseLetter(l rune) error {

     fmt.Printf(&amp;quot;using letter %s\n&amp;quot;, string(l))

     count, found := s.letters[l]
     if found == false {
        return fmt.Errorf(&amp;quot;sticker doesn&#39;t have letter %s&amp;quot;, l)
     }

     if count == 0 {
        return fmt.Errorf(&amp;quot;letter is used up&amp;quot;)
     }

     count--
     s.letters[l] = count
     return nil

  }

  type Pile struct {
     word     string
     stickers []*Sticker
  }

  func NewPile(word string) *Pile {
     p := &amp;amp;Pile{
        word:     word,
        stickers: make([]*Sticker, 0),
     }
     return p
  }

  func (p *Pile) HasLetter(l rune) bool {
     for _, sticker := range p.stickers {
        if sticker.HasLetter(l) {
           return true
        }
     }
     return false
  }

  func (p *Pile) AddSticker() {
     p.stickers = append(p.stickers, NewSticker(p.word))
  }

  func main() {

     var err error
     sticker_word := &amp;quot;WPENGINE&amp;quot;

     word := &amp;quot;pingping&amp;quot;
     if len(os.Args) &amp;gt; 1 {
        word = os.Args[1]
     }
     fmt.Printf(&amp;quot;sticker word %s\n&amp;quot;, sticker_word)
     fmt.Printf(&amp;quot;making word %s\n&amp;quot;, word)
     pile := NewPile(sticker_word)

     // just to validate we have the letters..
     sticker := NewSticker(sticker_word)

     for _, l := range word {
        //s := string(l)
        fmt.Printf(&amp;quot;letter %s\n&amp;quot;, string(l))

        if sticker.HasLetter(l) == false {
           err = fmt.Errorf(&amp;quot;no letter %s&amp;quot;, string(l))
           break
        }

        if pile.HasLetter(l) == false {
           pile.AddSticker()
        }

        // find a sticker that has the letter we&#39;re lookin for in the pile
        for _, sticker := range pile.stickers {
           if sticker.HasLetter(l) {
              sticker.UseLetter(l)
              continue
           }
        }

     }

     if err != nil {
        fmt.Printf(&amp;quot;ERROR: %s\n&amp;quot;, err)
        return
     }

     // print the results

     used := len(pile.stickers)
     fmt.Printf(&amp;quot;stickers used %d\n&amp;quot;, used)

     for i, sticker := range pile.stickers {
        fmt.Printf(&amp;quot;sticker #%d  letters %+v\n&amp;quot;, i+1, sticker.Desc())
     }

  }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>interesting tech feb 2016</title>
      <link>http://sigmonsays.github.io/2016/02/interesting-tech-feb-2016/</link>
      <pubDate>Mon, 01 Feb 2016 11:31:15 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/02/interesting-tech-feb-2016/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;asciinema - record your terminal in plain text and replay it!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;website - &lt;a href=&#34;https://asciinema.org/&#34;&gt;https://asciinema.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;find unused packages in a go repository - &lt;a href=&#34;https://github.com/nf/deadleaves&#34;&gt;https://github.com/nf/deadleaves&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;AppImages is a interesting format that is similar to other &amp;ldquo;self contained&amp;rdquo; technologies like
CDE (&lt;a href=&#34;http://www.pgbovine.net/cde.html&#34;&gt;http://www.pgbovine.net/cde.html&lt;/a&gt;). I havn&amp;rsquo;t read into it yet but lets hope it does better
than everyone else&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AppImage is at &lt;a href=&#34;https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages&#34;&gt;https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The web of names, hashes and UUIDs - &lt;a href=&#34;https://joearms.github.io/2015/03/12/The_web_of_names.html&#34;&gt;https://joearms.github.io/2015/03/12/The_web_of_names.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This isn&amp;rsquo;t the first time I read this but I came across it again recently and wanted to save it here&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>paste, an hour long project</title>
      <link>http://sigmonsays.github.io/2016/01/paste-an-hour-long-project/</link>
      <pubDate>Sun, 31 Jan 2016 10:58:55 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/01/paste-an-hour-long-project/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m sure anyone who has been on IRC or any type of chat understands the concept of a no paste service.&lt;/p&gt;

&lt;p&gt;It has always been bothersome to me that any paste, or &amp;ldquo;no paste&amp;rdquo; command line client has to be needlessly complex. Some i&amp;rsquo;ve tried to
use in the past have required installing ruby gems which I despise. So to scratch an itch, I wrote my very own which requires nothing
more than curl. Its code is on github [1] and the client is rediculously simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
paste() { curl --data-binary @- http://paste.grepped.org/paste ;  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;github &lt;a href=&#34;https://github.com/sigmonsays/paste&#34;&gt;https://github.com/sigmonsays/paste&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interesting tech Jan 2016</title>
      <link>http://sigmonsays.github.io/2016/01/interesting-tech-jan-2016/</link>
      <pubDate>Sun, 31 Jan 2016 10:52:23 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/01/interesting-tech-jan-2016/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;MQTT - &lt;a href=&#34;http://mqtt.org/&#34;&gt;http://mqtt.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MQTT is a machine-to-machine messaging protocol designed for IoT. Its design goals are small code and resource footprint is required (network, memory, etc) making
  it very interesting for mobile (and more) development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sheepdog - distributed block storage for qemu - &lt;a href=&#34;http://sheepdog.github.io/sheepdog/&#34;&gt;http://sheepdog.github.io/sheepdog/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;snap - &lt;a href=&#34;https://github.com/intelsdi-x/snap&#34;&gt;https://github.com/intelsdi-x/snap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;thermal cameras - &lt;a href=&#34;http://www.thermal.com/thermal-cameras/&#34;&gt;http://www.thermal.com/thermal-cameras/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;debops - &lt;a href=&#34;http://docs.debops.org/en/latest/index.html&#34;&gt;http://docs.debops.org/en/latest/index.html&lt;/a&gt; - automate installation of all your data center components&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;api.data.gov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>git-watch</title>
      <link>http://sigmonsays.github.io/2016/01/git-watch/</link>
      <pubDate>Sun, 03 Jan 2016 21:33:07 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/01/git-watch/</guid>
      <description>&lt;p&gt;git watch is a simple library and CLI tool for monitoring git repositories and triggering events (restart process) when they change.&lt;/p&gt;

&lt;p&gt;git watch [1] was designed as a way to easily build and deploy daemons in development when upstream changes. The changes can be either
code (in git) or configuration.&lt;/p&gt;

&lt;p&gt;So here is a simple example which will automatically rebuild and restart a application when you git push (&lt;a href=&#34;https://github.com/sigmonsays/git-watch/tree/master/examples/go&#34;&gt;https://github.com/sigmonsays/git-watch/tree/master/examples/go&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Below in git-watch.yaml we check the upstream every 5 seconds and merge the master branch in. execcmd is &amp;ldquo;my_application&amp;rdquo; which is a simple application. When a upstream
change is detected, we invoke the updatecmd. If the updatecmd does not succeed, the restart process is aborted. Assuming the update command succeeds, we then invoke the install
command. After the install command succeeds, the application is restarted.&lt;/p&gt;

&lt;p&gt;git-watch.yaml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # reinstall a go application when changes are detected in a git remote
  checkinterval: 5
  localbranch: master
  execcmd: my_application
  updatecmd: make
  install: make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Makefile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  REPO=github.com/sigmonsays/git-watch

  all:
     go get -u $(REPO)/examples/go/my_application/...

  install:
     go install $(REPO)/examples/go/my_application
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Full usage&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage of git-watch:
 -branch string
       local branch (default &amp;quot;master&amp;quot;)
 -check int
       git check interval (seconds) (default 5)
 -config string
       git watch config (default &amp;quot;git-watch.yaml&amp;quot;)
 -dir string
       change directory before starting (default &amp;quot;.&amp;quot;)
 -exec-cmd string
       exec command (default &amp;quot;make run&amp;quot;)
 -http string
       start a http server
 -inherit-env
       inherit environment
 -inotify-dir string
       use inotify as a trigger in directory
 -install-cmd string
       install command (default &amp;quot;make install&amp;quot;)
 -loglevel string
       set log level (default &amp;quot;error&amp;quot;)
 -once
       run once and exit
 -static-dir string
       static directory (default &amp;quot;static&amp;quot;)
 -update-cmd string
       update command (default &amp;quot;make&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;[1] - &lt;a href=&#34;https://github.com/sigmonsays/git-watch&#34;&gt;https://github.com/sigmonsays/git-watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cool Software </title>
      <link>http://sigmonsays.github.io/2015/02/cool-software/</link>
      <pubDate>Thu, 05 Feb 2015 04:20:00 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2015/02/cool-software/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hound - &lt;a href=&#34;https://github.com/etsy/Hound&#34;&gt;https://github.com/etsy/Hound&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;silver surfer - &lt;a href=&#34;http://geoff.greer.fm/ag/&#34;&gt;http://geoff.greer.fm/ag/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;https://github.com/ggreer/the_silver_searcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;microservices future&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.giantswarm.io/docker-and-related-services-enable-a-future-of-microservices-for-everyone&#34;&gt;http://blog.giantswarm.io/docker-and-related-services-enable-a-future-of-microservices-for-everyone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>convenient cli tookit using python</title>
      <link>http://sigmonsays.github.io/2015/02/convenient-cli-tookit-using-python/</link>
      <pubDate>Tue, 03 Feb 2015 11:59:36 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/2015/02/convenient-cli-tookit-using-python/</guid>
      <description>

&lt;p&gt;python is a incredibly useful language and has a powerful type system which
can be pretty convenient. I&amp;rsquo;ve written python for many years now and when
I need a quick tool, most the time I write it in python.&lt;/p&gt;

&lt;p&gt;These tools have built up over time and i&amp;rsquo;ve been collecting them organically
into a python startup file as a set of libraries and functions.&lt;/p&gt;

&lt;p&gt;create a file in $HOME/&lt;strong&gt;.pythonstartup&lt;/strong&gt; and cherry pick anything below that you find
useful.&lt;/p&gt;

&lt;p&gt;The code below is missing the imports used.. instead copy the text from the imports section&lt;/p&gt;

&lt;h2 id=&#34;tab-completion-and-history:e4940539d06f8e0fcff6a9f58ac37a44&#34;&gt;tab completion and history&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  # Tab completion
  import rlcompleter
  import readline
  readline.parse_and_bind(&amp;quot;tab: complete&amp;quot;)

  # History
  histfile = os.path.join(os.path.expanduser(&amp;quot;~&amp;quot;), &amp;quot;.pyhist&amp;quot;)
  try:
      readline.read_history_file(histfile)
  except IOError:
      pass
  atexit.register(readline.write_history_file, histfile)
  del histfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;imports:e4940539d06f8e0fcff6a9f58ac37a44&#34;&gt;imports&lt;/h2&gt;

&lt;p&gt;i&amp;rsquo;m going to just drop a list of imports used. I&amp;rsquo;ll let you
sort out which ones are unused with a linter (pyflakes peraps?).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  import os
  import sys
  import json
  import time
  import atexit
  import urllib
  import urlparse
  import uuid
  import hashlib
  import hmac
  import base64
  import binascii
  import struct
  import os
  from urllib import quote_plus,unquote,quote
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-prompt-and-line-counter:e4940539d06f8e0fcff6a9f58ac37a44&#34;&gt;custom prompt and line counter&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# use a custom prompt
class LineCounter(object):
    def __init__(self):
        self.count = 0
    def __str__(self):
        self.count += 1
        return &#39;&amp;gt;&amp;gt;&amp;gt; &#39;
line = LineCounter()
sys.ps1 = line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this makes it possible to interact with the line object like this and whatever you return from &lt;strong&gt;str&lt;/strong&gt; will be your prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; line.count
6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handy-string-functions:e4940539d06f8e0fcff6a9f58ac37a44&#34;&gt;handy string functions&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  def safe_str(s):
      try:
          return str(s)
      except UnicodeEncodeError:
          return unicode(s).encode(&#39;utf-8&#39;)

  quote = lambda s: urllib.quote(s)
  unquote = lambda s: urllib.unquote(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;file-size-utilities:e4940539d06f8e0fcff6a9f58ac37a44&#34;&gt;file size utilities&lt;/h2&gt;

&lt;p&gt;format bytes as a human printable form&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def formatSize(bytes, base=1024, precision=2):
      units = [ &#39;b&#39;, &#39;kb&#39;, &#39;mb&#39;, &#39;gb&#39;, &#39;tb&#39;, &#39;pb&#39;, &#39;eb&#39;, &#39;xb&#39;, &#39;yb&#39; ]
      nunits = len(units)
      for n in xrange(nunits, -1, -1):
          if bytes &amp;gt; base ** n:
              break
      v = round(float(bytes) / (base ** n), precision)
      return (v, units[n])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;convert bytes between units&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  class ConvertSize:
     def __init__(self, base=1024):
        B = 1
        KB = B * base
        MB = KB * base
        GB = MB * base
        TB = GB * base
        PB = TB * base
        EB = PB * base
        ZB = EB * base
        YB = ZB * base
        base = base
        _sym = &#39;B KB MB GB TB PB EB ZB YB&#39;.split()
        self.__dict__.update(locals())

     def _install(self, units, g):
        for n, unit in enumerate(units.split()):
           g[unit]=getattr(self, &#39;_&#39;+self._sym[n])
     def _B(self, v):  return v * self.B
     def _KB(self, v): return v * self.KB
     def _MB(self, v): return v * self.MB
     def _GB(self, v): return v * self.GB
     def _TB(self, v): return v * self.TB
     def _PB(self, v): return v * self.PB
     def _EB(self, v): return v * self.EB
     def _ZB(self, v): return v * self.ZB
     def _YB(self, v): return v * self.YB

  units = &#39;byte kilobyte megabyte gigabyte terabyte petabyte exabyte zettabyte yottabyte&#39;
  ConvertSize(1000)._install(units, globals())

  units = &#39;bit kibibyte mebibyte gibibyte tebibyte pebibyte exbibyte zebibyte yobibyte&#39;
  ConvertSize(1024)._install(units, globals())
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;time-utilities:e4940539d06f8e0fcff6a9f58ac37a44&#34;&gt;time utilities&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  def formatTime(s, legend = [  &#39;d&#39;, &#39;h&#39;, &#39;m&#39;, &#39;s&#39; ]):
      units = [  86400, 3600, 60, 1 ]
      r = s
      ret = []
      for u, l in zip(units, legend):
          if r &amp;gt;= u:
              ret.append(&amp;quot;%d%s&amp;quot; % (r / u, l))
              r -= u * int(r / u)
          if r == 0:
              break
      if len(ret) == 0:
          return &#39;0s&#39;
      return &amp;quot;&amp;quot;.join(ret)

  class ConvertTimeUtil:
     &amp;quot;&amp;quot;&amp;quot;
     convert time tool expected to be used in interactive cli
     everything is stored in nanoseconds internally
     then converted to the appropriate format on output in the ConvertTimeTo class

     picosecond          1,000,000,000,000     one trillionth of a second.    10 ^ -9
     nanosecond          1,000,000,000         one billionth of a second.    10 ^ -9
     microsecond         1,000,000             one millionth of a second.    10 ^ -6
     millisecond         1,000                 one thousandth of a second.   10 ^ -3

     &amp;gt;&amp;gt;&amp;gt; ConvertTime.nanoseconds(6606999).to_seconds()
     0.006606999

     &amp;quot;&amp;quot;&amp;quot;
     Nanosecond  = 1
     Microsecond          = 1000 * Nanosecond
     Millisecond          = 1000 * Microsecond
     Second               = 1000 * Millisecond
     Minute               = 60 * Second
     Hour                 = 60 * Minute
     Day                  = 24 * Hour

     def nanoseconds(self, v): return ConvertTimeTo(v)
     def microseconds(self, v): return ConvertTimeTo(v * self.Microsecond)
     def milliseconds(self, v): return ConvertTimeTo(v * self.Millisecond)
     def seconds(self, v): return ConvertTimeTo(v * self.Second)
     def minutes(self, v): return ConvertTimeTo(v * self.Minute)
     def hours(self, v): return ConvertTimeTo(v * self.Hour)
     def days(self, v): return ConvertTimeTo(v * self.Day)

  class ConvertTimeTo:
     def __init__(self, v):
        self.v = float(v)
     def to_nanoseconds(self): return self.v
     def to_microseconds(self): return self.v / ConvertTimeUtil.Microsecond
     def to_milliseconds(self): return self.v / ConvertTimeUtil.Millisecond
     def to_seconds(self): return self.v / ConvertTimeUtil.Second
     def to_minutes(self): return self.v / ConvertTimeUtil.Minute
     def to_hours(self): return self.v / ConvertTimeUtil.Hour
     def to_days(self): return self.v / ConvertTimeUtil.Day

     def __repr__(self):
        return &amp;quot;&amp;lt;%s v=%s&amp;gt;&amp;quot; % (self.__class__.__name__, self.v)

  ConvertTime = ConvertTimeUtil()

  nanoseconds = ConvertTime.nanoseconds
  microseconds = ConvertTime.microseconds
  milliseconds = ConvertTime.milliseconds
  seconds = ConvertTime.seconds
  minutes = ConvertTime.minutes
  hours = ConvertTime.hours
  days = ConvertTime.days
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;misc-utilities:e4940539d06f8e0fcff6a9f58ac37a44&#34;&gt;misc utilities&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  def to_hex(t, nbytes):
      &amp;quot;Format text t as a sequence of nbyte long values separated by spaces.&amp;quot;
      chars_per_item = nbytes * 2
      hex_version = binascii.hexlify(t)
      num_chunks = len(hex_version) / chars_per_item
      def chunkify():
          for start in xrange(0, len(hex_version), chars_per_item):
              yield hex_version[start:start + chars_per_item]
      return &#39; &#39;.join(chunkify())
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;display-hooks:e4940539d06f8e0fcff6a9f58ac37a44&#34;&gt;display hooks&lt;/h2&gt;

&lt;p&gt;this display hook will automatically pretty print returned values from cli expressions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # display hook hack to pretty print everything by default
  # use pprint_on or pprint_off to enable/disable pretty printing
  import pprint
  import sys

  orig_displayhook = sys.displayhook

  def myhook(value):
      if value != None:
          __builtins__._ = value
          pprint.pprint(value)

  __builtins__.pprint_on = lambda: setattr(sys, &#39;displayhook&#39;, myhook)
  __builtins__.pprint_off = lambda: setattr(sys, &#39;displayhook&#39;, orig_displayhook)
  # end display hook hack to pretty print everything
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cool Software</title>
      <link>http://sigmonsays.github.io/2014/10/cool-software/</link>
      <pubDate>Wed, 22 Oct 2014 09:41:33 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2014/10/cool-software/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Task Spooler - &lt;a href=&#34;http://vicerveza.homeunix.net/~viric/soft/ts/&#34;&gt;http://vicerveza.homeunix.net/~viric/soft/ts/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An oldie but a goodie.. I had used this many years ago but forgot its name and wanted it again.. Here&amp;rsquo;s to remembering!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ban systemd</title>
      <link>http://sigmonsays.github.io/2014/09/ban-systemd/</link>
      <pubDate>Mon, 22 Sep 2014 21:26:16 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2014/09/ban-systemd/</guid>
      <description>

&lt;h1 id=&#34;updates:749128d591ff05498577f36910c58f15&#34;&gt;updates&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nov2014 - an exploit in systemd resolver - &lt;a href=&#34;https://news.ycombinator.com/item?id=8595335&#34;&gt;https://news.ycombinator.com/item?id=8595335&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just another reason to do one thing well and not try to do too much. C&amp;rsquo;mon systemd, focus.&lt;/li&gt;
&lt;li&gt;Please help me understand why a init.d replacement needs to provide a resolver.&lt;/li&gt;
&lt;li&gt;some gems from this thread

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;I find the design of systemd-resolved to be very strange. It uses dbus to talk to glibc, and it seems to be a new, from-scratch implementation of a DNS resolver. To be clear, I don&amp;rsquo;t really think it matters whether systemd-resolved is under the systemd umbrella, but I do think that the design has a lot of unnecessary NIH syndrome.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;This is a perfect example of why the systemd approach of putting a bunch of disparate components under a single tightly-coupled umbrella is bad engineering.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;It&amp;rsquo;s mind blowing to realize that because of the init system we have on our system we are now vulnerable to DNS poisoning.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;anyways, give the thread a read and see for yourself how systemd should be abandoned&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;website which describes a lot of good points - &lt;a href=&#34;http://boycottsystemd.org/&#34;&gt;http://boycottsystemd.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;why-i-want-to-ban-systemd:749128d591ff05498577f36910c58f15&#34;&gt;why I want to ban systemd&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;the developers and members on the irc room are aggressive and counter productive and only seem to want to fight
rather than try to solve any issue.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I read countless posts about the terrible nature of the developers&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoworld.com/article/2608798/data-center/systemd--harbinger-of-the-linux-apocalypse.html?page=2&#34;&gt;http://www.infoworld.com/article/2608798/data-center/systemd--harbinger-of-the-linux-apocalypse.html?page=2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linus Banned a developer for fighting&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://bugs.freedesktop.org/show_bug.cgi?id=76935&#34;&gt;https://bugs.freedesktop.org/show_bug.cgi?id=76935&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href=&#34;https://bugs.freedesktop.org/show_bug.cgi?id=76935#c24&#34;&gt;https://bugs.freedesktop.org/show_bug.cgi?id=76935#c24&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Systemd needs to be forked NOW.
   Linus explained it well already:
   Kay and Lennart: please just go away, disappear from the FOSS community, we don&#39;t need you and your crap.
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;They ban you if they do not agree with you&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.debian.org/debian-ctte/2014/02/msg00389.html&#34;&gt;https://lists.debian.org/debian-ctte/2014/02/msg00389.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Countless people disagree &amp;ndash; even Linus.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://ewontfix.com/14/&#34;&gt;http://ewontfix.com/14/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=7522200&#34;&gt;https://news.ycombinator.com/item?id=7522200&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lxer.com/module/forums/t/35320/&#34;&gt;http://lxer.com/module/forums/t/35320/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/lusis/status/450701265782456320&#34;&gt;https://twitter.com/lusis/status/450701265782456320&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;more-updates-to-follow:749128d591ff05498577f36910c58f15&#34;&gt;More updates to follow..&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m pretty entertained but really saddened by the current situation. I joined the IRC room to ask abuot a bug and only
got racial comments and vulgar language when I inquired about a bug. We didn&amp;rsquo;t even get to discussing the
technical reasons, I had to leave the channel. I might try again later, I am curious.&lt;/p&gt;

&lt;p&gt;The community needs to reject this overly complex piece of software without a clear focus or direction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>building packages with docker</title>
      <link>http://sigmonsays.github.io/2014/09/building-packages-with-docker/</link>
      <pubDate>Thu, 11 Sep 2014 15:32:44 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2014/09/building-packages-with-docker/</guid>
      <description>

&lt;p&gt;This is a simple idea I had while waiting for a build to complete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The background&lt;/strong&gt;
Its common to use dpkg-buildpackage inside of a chroot managed by pdebuild. The pdebuild script
takes a minimal base image tarball and installs all dependencies in it required to
build your package.&lt;/p&gt;

&lt;p&gt;The build dependencies come from debian/control Build-Depends section. The package being
built is a python application using virtualenv. A lot of the packages come from apt however.
There is a bunch of python pip/easy install work performed too.&lt;/p&gt;

&lt;p&gt;Needless to say this takes quite some time to do since extracting a .deb and installing
it is a pretty expensive operation when there is a lot of dependencies.&lt;/p&gt;

&lt;p&gt;Obverve the following times&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pdebuild - 2m35.113s&lt;/li&gt;
&lt;li&gt;dpkg-buildpackage - 0m55.480s&lt;/li&gt;
&lt;li&gt;docker - 0m37.421s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;because i&amp;rsquo;m not interested in explaining how the other 2 method work, i&amp;rsquo;ll leave that out. However, let me
explain how the docker build works.&lt;/p&gt;

&lt;h2 id=&#34;docker:98af894833143101fe4ab2edf48c5c0c&#34;&gt;docker&lt;/h2&gt;

&lt;p&gt;The idea is to exploit the layered file system of containers to provide build dependencies. Since
its a copy on write file system, this means providing a container with all build deps present is
incredibly fast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM ubuntu
RUN apt-get update \
   &amp;amp;&amp;amp; apt-get install -y dpkg-dev


# This is the key line, it installs the build dependencies for your application!
RUN apt-get build-dep -y --force-yes YOUR_PACKAGE

RUN useradd packaging \
   &amp;amp;&amp;amp; mkdir -p /packaging \
   &amp;amp;&amp;amp; chown packaging /packaging

USER packaging
ADD build.sh /bin/build.sh

ENTRYPOINT [ &amp;quot;/bin/build.sh&amp;quot; ]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;build.sh&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo &amp;quot;[build.sh] $@&amp;quot;

set -x

cd /packaging
pwd
tar vzxf -
cd package
dpkg-buildpackage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to invoke the build we stream the contents at a tar.gz into the container which streams
it to disk and builds the package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package_stream () 
{ 
    git archive HEAD --format tar --prefix=package/ | gzip -9
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, this is the final command that runs the build&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  time package_stream | docker run -i debbie 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>docker wishlist</title>
      <link>http://sigmonsays.github.io/2014/09/docker-wishlist/</link>
      <pubDate>Sun, 07 Sep 2014 19:37:21 -0700</pubDate>
      
      <guid>http://sigmonsays.github.io/2014/09/docker-wishlist/</guid>
      <description>

&lt;p&gt;things I find that I wish docker supported&lt;/p&gt;

&lt;h1 id=&#34;dockerfile:1a0ce501ba8da3f2c3a74598e01110ce&#34;&gt;dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;store build context with the image&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;provides ability to change original dockerfile for images you download&lt;/li&gt;
&lt;li&gt;saves dockerfile and other build artifacts&lt;/li&gt;
&lt;li&gt;similar in concept to a &amp;ldquo;source package&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;support for variables&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is very little that the dockerfile actually supports beyond basic static directives.&lt;/p&gt;

&lt;p&gt;If dockerfile supported templates and variables, we could allow repetitive lines to be reduced to
  the bare minimum. This would allow snippets like this to be greatly reduced. We shouldn&amp;rsquo;t have to
  repeat 0.1.3 everywhere, it should just be a variable!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN curl http://example.net/package-0.1.3.tar.gz -o package-0.1.3.tar.gz
RUN tar zxf package-0.1.3.tar.gz 
RUN cd package-0.1.3 &amp;amp;&amp;amp; make &amp;amp;&amp;amp; \
    cp package-0.1.3/bin/whatever /usr/bin/whatever
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>