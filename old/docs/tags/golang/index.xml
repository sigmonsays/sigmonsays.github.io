<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on sigmonsays</title>
    <link>http://sigmonsays.github.io/tags/golang/</link>
    <description>Recent content in Golang on sigmonsays</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Nov 2017 10:27:27 -0800</lastBuildDate>
    <atom:link href="http://sigmonsays.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>why use the go programming language?</title>
      <link>http://sigmonsays.github.io/post/why-go/</link>
      <pubDate>Thu, 16 Nov 2017 10:27:27 -0800</pubDate>
      <guid>http://sigmonsays.github.io/post/why-go/</guid>
      <description>&lt;p&gt;I have been a go programmer before go 1.0 was released, I think that brings me back to beginning writing go code around 2011. as en exercise I wrote a simple daemon to handle&#xA;some backend work where concurrency was key and have enjoyed developing it for quite some time. It replaced a python process where many actors&#xA;needed to operate on a workqueue. This daemon is actually still in produciton today =P&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-watch</title>
      <link>http://sigmonsays.github.io/post/git-watch/</link>
      <pubDate>Sun, 03 Jan 2016 21:33:07 -0800</pubDate>
      <guid>http://sigmonsays.github.io/post/git-watch/</guid>
      <description>&lt;p&gt;git watch is a simple library and CLI tool for monitoring git repositories and triggering events (restart process) when they change.&lt;/p&gt;&#xA;&lt;p&gt;git watch [1] was designed as a way to easily build and deploy daemons in development when upstream changes. The changes can be either&#xA;code (in git) or configuration.&lt;/p&gt;&#xA;&lt;p&gt;So here is a simple example which will automatically rebuild and restart a application when you git push (&lt;a href=&#34;https://github.com/sigmonsays/git-watch/tree/master/examples/go&#34;&gt;https://github.com/sigmonsays/git-watch/tree/master/examples/go&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;Below in git-watch.yaml we check the upstream every 5 seconds and merge the master branch in. execcmd is &amp;ldquo;my_application&amp;rdquo; which is a simple application. When a upstream&#xA;change is detected, we invoke the updatecmd. If the updatecmd does not succeed, the restart process is aborted. Assuming the update command succeeds, we then invoke the install&#xA;command. After the install command succeeds, the application is restarted.&lt;/p&gt;</description>
    </item>
    <item>
      <title>go powered databases</title>
      <link>http://sigmonsays.github.io/post/go-powered-databases/</link>
      <pubDate>Sat, 29 Nov 2014 10:45:05 -0800</pubDate>
      <guid>http://sigmonsays.github.io/post/go-powered-databases/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;bolt - &lt;a href=&#34;https://github.com/boltdb/bolt&#34;&gt;https://github.com/boltdb/bolt&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;ledis - &lt;a href=&#34;http://ledisdb.com/&#34;&gt;http://ledisdb.com/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;tiedot - &lt;a href=&#34;https://github.com/HouzuoGuo/tiedot&#34;&gt;https://github.com/HouzuoGuo/tiedot&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;cockroachdb - &lt;a href=&#34;https://github.com/cockroachdb/cockroach&#34;&gt;https://github.com/cockroachdb/cockroach&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bolt&#34;&gt;bolt&lt;/h2&gt;&#xA;&lt;p&gt;pure go key-value datastore&lt;/p&gt;&#xA;&lt;h2 id=&#34;ledis&#34;&gt;ledis&lt;/h2&gt;&#xA;&lt;p&gt;redis like database written in go&lt;/p&gt;&#xA;&lt;p&gt;attractive to embed redis like features directly into your application which&#xA;will reduce operational complexity.&lt;/p&gt;&#xA;&lt;h2 id=&#34;tiedot&#34;&gt;tiedot&lt;/h2&gt;&#xA;&lt;p&gt;JSON document database&lt;/p&gt;&#xA;&lt;h2 id=&#34;cockrochdb&#34;&gt;cockrochdb&lt;/h2&gt;&#xA;&lt;p&gt;A Scalable, Geo-Replicated, Transactional Datastore&lt;/p&gt;&#xA;&lt;p&gt;design document &lt;a href=&#34;https://docs.google.com/document/d/11k2EmhLGSbViBvi6_zFEiKzuXxYF49ZuuDJLe6O8gBU/edit&#34;&gt;https://docs.google.com/document/d/11k2EmhLGSbViBvi6_zFEiKzuXxYF49ZuuDJLe6O8gBU/edit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;feature summary&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ACID transactional semantics&lt;/li&gt;&#xA;&lt;li&gt;versioned values&lt;/li&gt;&#xA;&lt;li&gt;primary design goal is consistency and survivability&lt;/li&gt;&#xA;&lt;li&gt;aims to tolerate disk, server, rack and datacenter failures&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;related technologies&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
