<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on sigmonsays</title>
    <link>http://localhost:1313/tags/projects/</link>
    <description>Recent content in Projects on sigmonsays</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Dec 2023 10:58:55 -0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>picman: photo sorting tool</title>
      <link>http://localhost:1313/post/picman/</link>
      <pubDate>Sun, 31 Dec 2023 10:58:55 -0800</pubDate>
      <guid>http://localhost:1313/post/picman/</guid>
      <description>&lt;p&gt;github &lt;a href=&#34;https://github.com/sigmonsays/picman&#34;&gt;https://github.com/sigmonsays/picman&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I wrote a basic tool to replace my krufty bash scripts that imports my photos from various locations into&#xA;their final resting place.&lt;/p&gt;&#xA;&lt;p&gt;The tool operates in steps where each step is kind of idempotent. The set of all steps is called&#xA;a workflow and operates on a single file. see &lt;a href=&#34;https://github.com/sigmonsays/picman/blob/dev/autosort/workflow.go#L18&#34;&gt;code&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Each step operates on the same workflow object, which primarily has a state object&lt;/p&gt;&#xA;&lt;p&gt;State Object &lt;a href=&#34;https://github.com/sigmonsays/picman/blob/dev/core/statefile.go#L26&#34;&gt;code&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;holds exif data&lt;/li&gt;&#xA;&lt;li&gt;holds file stat information&lt;/li&gt;&#xA;&lt;li&gt;holds date metadata that is obtained via exif or other logic&lt;/li&gt;&#xA;&lt;li&gt;holds checksum and logs of processing the file&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Steps in order&lt;/p&gt;</description>
    </item>
    <item>
      <title>dotbot</title>
      <link>http://localhost:1313/post/dotbot/</link>
      <pubDate>Sun, 29 Jan 2023 08:57:49 -0800</pubDate>
      <guid>http://localhost:1313/post/dotbot/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#why&#34;&gt;why&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#dotbot&#34;&gt;dotbot&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h1 id=&#34;why&#34;&gt;why&lt;/h1&gt;&#xA;&lt;p&gt;dotbot is a tool to manage dot files. I wrote this tool after gettting tired of futzing around&#xA;with the python dotbot from &lt;a href=&#34;https://github.com/anishathalye/dotbot&#34;&gt;https://github.com/anishathalye/dotbot&lt;/a&gt;. Full disclosure I love&#xA;this tool and it&amp;rsquo;s the motivation for the development of my own dotbot.&lt;/p&gt;&#xA;&lt;p&gt;I had two main issues that were annoying to me. First, git submodules were a part of the bootstrap&#xA;process. Second, I always needed some yaml dependancy installed. These two steps combined and that&#xA;written in a confusing shell script I managed to find getting setup annoying, and slightly difficult.&lt;/p&gt;</description>
    </item>
    <item>
      <title>screenshot</title>
      <link>http://localhost:1313/post/screenshot/</link>
      <pubDate>Wed, 06 Dec 2017 13:01:02 -0700</pubDate>
      <guid>http://localhost:1313/post/screenshot/</guid>
      <description>&lt;p&gt;Screenshot is a simple python script that has evolved over time. It started out as a shell script which called &lt;code&gt;import -window root screenshot.png&lt;/code&gt; and has&#xA;evolved into a full featured application.&lt;/p&gt;&#xA;&lt;p&gt;Github page - &lt;a href=&#34;https://github.com/sigmonsays/screenshot/blob/master/README.md&#34;&gt;https://github.com/sigmonsays/screenshot/blob/master/README.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The point of this post is to demonstrate how to setup screenshot and how to use it to achieve a few things&lt;/p&gt;&#xA;&lt;p&gt;Installation&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/sigmonsays/screenshot.git&#xA;sudo apt-get install -y xclip imagemagick&#xA;cd screenshot&#xA;sudo pip install .&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Configuration&lt;/p&gt;</description>
    </item>
    <item>
      <title>paste, an hour long project</title>
      <link>http://localhost:1313/post/paste/</link>
      <pubDate>Sun, 31 Jan 2016 10:58:55 -0800</pubDate>
      <guid>http://localhost:1313/post/paste/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m sure anyone who has been on IRC or any type of chat understands the concept of a no paste service.&lt;/p&gt;&#xA;&lt;p&gt;It has always been bothersome to me that any paste, or &amp;ldquo;no paste&amp;rdquo; command line client has to be needlessly complex. Some i&amp;rsquo;ve tried to&#xA;use in the past have required installing ruby gems which I despise. So to scratch an itch, I wrote my very own which requires nothing&#xA;more than curl. Its code is on github [1] and the client is rediculously simple:&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-watch</title>
      <link>http://localhost:1313/post/git-watch/</link>
      <pubDate>Sun, 03 Jan 2016 21:33:07 -0800</pubDate>
      <guid>http://localhost:1313/post/git-watch/</guid>
      <description>&lt;p&gt;git watch is a simple library and CLI tool for monitoring git repositories and triggering events (restart process) when they change.&lt;/p&gt;&#xA;&lt;p&gt;git watch [1] was designed as a way to easily build and deploy daemons in development when upstream changes. The changes can be either&#xA;code (in git) or configuration.&lt;/p&gt;&#xA;&lt;p&gt;So here is a simple example which will automatically rebuild and restart a application when you git push (&lt;a href=&#34;https://github.com/sigmonsays/git-watch/tree/master/examples/go&#34;&gt;https://github.com/sigmonsays/git-watch/tree/master/examples/go&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;Below in git-watch.yaml we check the upstream every 5 seconds and merge the master branch in. execcmd is &amp;ldquo;my_application&amp;rdquo; which is a simple application. When a upstream&#xA;change is detected, we invoke the updatecmd. If the updatecmd does not succeed, the restart process is aborted. Assuming the update command succeeds, we then invoke the install&#xA;command. After the install command succeeds, the application is restarted.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
