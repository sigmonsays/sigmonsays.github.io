<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on sig</title>
    <link>http://sigmonsays.github.io/tags/projects/</link>
    <description>Recent content in Projects on sig</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 30 Nov 2017 16:07:01 -0800</lastBuildDate>
    <atom:link href="http://sigmonsays.github.io/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Projects</title>
      <link>http://sigmonsays.github.io/projects/</link>
      <pubDate>Thu, 30 Nov 2017 16:07:01 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/projects/</guid>
      <description>

&lt;p&gt;Various ramblings and projects, mostly tools and libraries&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I maintain a page of &lt;a href=&#34;http://sigmonsays.github.io/notes/interesting-tech/&#34;&gt; Interesting Tech &lt;/a&gt; which are random pieces of software or tools I find interesting at the time.&lt;/p&gt;

&lt;p&gt;There is a section on &lt;a href=&#34;http://sigmonsays.github.io/bash/&#34;&gt;bash scripting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sigmonsays.github.io/2016/01/paste-an-hour-long-project/&#34;&gt; Paste &lt;/a&gt;
An hour long project where I wrote a paste server and shell script client&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sigmonsays/screenshot&#34;&gt; Screenshot &lt;/a&gt;
python script for taking screenshots and uploading them to a cloud storage provider&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sigmonsays/git-watch&#34;&gt; git-watch &lt;/a&gt;
watch a git repository for changes and execute update commands&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sigmonsays/dice&#34;&gt; dice &lt;/a&gt;
simple dice program as a 1 hour hack&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sigmonsays/runitcmd&#34;&gt; runitcmd &lt;/a&gt;
runit utility written in go for setting up and managing runit services&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sigmonsays/haproxyctl&#34;&gt; haproxyctl &lt;/a&gt;
go cli and library for managing haproxy&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sigmonsays/dns-router&#34;&gt; dns-router &lt;/a&gt;
personal dns server with bells and whistles written in go&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sigmonsays/webchat&#34;&gt; webchat &lt;/a&gt;
forked websocket demo which implements a chat server that is similar in function to a IRC server&lt;/p&gt;

&lt;h1 id=&#34;go-libaries:3c42bb4157bf51d85ae7ffc4e1685909&#34;&gt;Go libaries&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sigmonsays/go-logging&#34;&gt; go-logging &lt;/a&gt;
leveled logging libary for go&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>paste, an hour long project</title>
      <link>http://sigmonsays.github.io/2016/01/paste-an-hour-long-project/</link>
      <pubDate>Sun, 31 Jan 2016 10:58:55 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/01/paste-an-hour-long-project/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m sure anyone who has been on IRC or any type of chat understands the concept of a no paste service.&lt;/p&gt;

&lt;p&gt;It has always been bothersome to me that any paste, or &amp;ldquo;no paste&amp;rdquo; command line client has to be needlessly complex. Some i&amp;rsquo;ve tried to
use in the past have required installing ruby gems which I despise. So to scratch an itch, I wrote my very own which requires nothing
more than curl. Its code is on github [1] and the client is rediculously simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
paste() { curl --data-binary @- http://paste.grepped.org/paste ;  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;github &lt;a href=&#34;https://github.com/sigmonsays/paste&#34;&gt;https://github.com/sigmonsays/paste&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git-watch</title>
      <link>http://sigmonsays.github.io/2016/01/git-watch/</link>
      <pubDate>Sun, 03 Jan 2016 21:33:07 -0800</pubDate>
      
      <guid>http://sigmonsays.github.io/2016/01/git-watch/</guid>
      <description>&lt;p&gt;git watch is a simple library and CLI tool for monitoring git repositories and triggering events (restart process) when they change.&lt;/p&gt;

&lt;p&gt;git watch [1] was designed as a way to easily build and deploy daemons in development when upstream changes. The changes can be either
code (in git) or configuration.&lt;/p&gt;

&lt;p&gt;So here is a simple example which will automatically rebuild and restart a application when you git push (&lt;a href=&#34;https://github.com/sigmonsays/git-watch/tree/master/examples/go&#34;&gt;https://github.com/sigmonsays/git-watch/tree/master/examples/go&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Below in git-watch.yaml we check the upstream every 5 seconds and merge the master branch in. execcmd is &amp;ldquo;my_application&amp;rdquo; which is a simple application. When a upstream
change is detected, we invoke the updatecmd. If the updatecmd does not succeed, the restart process is aborted. Assuming the update command succeeds, we then invoke the install
command. After the install command succeeds, the application is restarted.&lt;/p&gt;

&lt;p&gt;git-watch.yaml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # reinstall a go application when changes are detected in a git remote
  checkinterval: 5
  localbranch: master
  execcmd: my_application
  updatecmd: make
  install: make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Makefile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  REPO=github.com/sigmonsays/git-watch

  all:
     go get -u $(REPO)/examples/go/my_application/...

  install:
     go install $(REPO)/examples/go/my_application
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Full usage&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Usage of git-watch:
 -branch string
       local branch (default &amp;quot;master&amp;quot;)
 -check int
       git check interval (seconds) (default 5)
 -config string
       git watch config (default &amp;quot;git-watch.yaml&amp;quot;)
 -dir string
       change directory before starting (default &amp;quot;.&amp;quot;)
 -exec-cmd string
       exec command (default &amp;quot;make run&amp;quot;)
 -http string
       start a http server
 -inherit-env
       inherit environment
 -inotify-dir string
       use inotify as a trigger in directory
 -install-cmd string
       install command (default &amp;quot;make install&amp;quot;)
 -loglevel string
       set log level (default &amp;quot;error&amp;quot;)
 -once
       run once and exit
 -static-dir string
       static directory (default &amp;quot;static&amp;quot;)
 -update-cmd string
       update command (default &amp;quot;make&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;[1] - &lt;a href=&#34;https://github.com/sigmonsays/git-watch&#34;&gt;https://github.com/sigmonsays/git-watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>